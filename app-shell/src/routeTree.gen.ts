/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const Remote2LazyImport = createFileRoute('/remote_2')()
const Remote1LazyImport = createFileRoute('/remote_1')()

// Create/Update Routes

const Remote2LazyRoute = Remote2LazyImport.update({
  id: '/remote_2',
  path: '/remote_2',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/remote_2.lazy').then((d) => d.Route))

const Remote1LazyRoute = Remote1LazyImport.update({
  id: '/remote_1',
  path: '/remote_1',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/remote_1.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/remote_1': {
      id: '/remote_1'
      path: '/remote_1'
      fullPath: '/remote_1'
      preLoaderRoute: typeof Remote1LazyImport
      parentRoute: typeof rootRoute
    }
    '/remote_2': {
      id: '/remote_2'
      path: '/remote_2'
      fullPath: '/remote_2'
      preLoaderRoute: typeof Remote2LazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/remote_1': typeof Remote1LazyRoute
  '/remote_2': typeof Remote2LazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/remote_1': typeof Remote1LazyRoute
  '/remote_2': typeof Remote2LazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/remote_1': typeof Remote1LazyRoute
  '/remote_2': typeof Remote2LazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/remote_1' | '/remote_2'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/remote_1' | '/remote_2'
  id: '__root__' | '/' | '/remote_1' | '/remote_2'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  Remote1LazyRoute: typeof Remote1LazyRoute
  Remote2LazyRoute: typeof Remote2LazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  Remote1LazyRoute: Remote1LazyRoute,
  Remote2LazyRoute: Remote2LazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/remote_1",
        "/remote_2"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/remote_1": {
      "filePath": "remote_1.lazy.jsx"
    },
    "/remote_2": {
      "filePath": "remote_2.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
